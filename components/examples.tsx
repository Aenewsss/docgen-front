import Image from "next/image"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import ReactMarkdown from "react-markdown"
import Markdown from 'markdown-to-jsx'

export function Examples() {
  return (
    <section id="examples" className="py-12 md:py-24">
      <div className="container px-4 md:px-6">
        <div className="flex flex-col items-center justify-center space-y-4 text-center mb-12">
          <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">Exemplos de Documenta√ß√£o</h2>
          <p className="max-w-[700px] text-muted-foreground md:text-xl">
            Veja como sua documenta√ß√£o ficar√° ap√≥s o processamento
          </p>
        </div>

        <Tabs defaultValue="frontend" className="w-full max-w-4xl mx-auto">
          <TabsList className="grid w-full grid-cols-2 mb-8">
            <TabsTrigger value="frontend">Frontend</TabsTrigger>
            <TabsTrigger value="backend">Backend</TabsTrigger>
            {/* <TabsTrigger value="fullstack">Full Stack</TabsTrigger> */}
          </TabsList>
          <TabsContent value="frontend" className="space-y-4">
            <Card>
              <CardContent className="p-4">
                <Markdown className="max-w-none prose dark:prose-invert max-h-[500px] overflow-y-auto">
                  {`
# üìÑ Documenta√ß√£o T√©cnica: \`page.tsx\`<br />
<br />
**üìÅ Arquivo:**<br />
\`temp_repositories/Aenewsss_impact-flow/Aenewsss-impact-flow-dc667c7/src/app/page.tsx\`<br />
<br />
**üîç Linguagem:**<br />
TypeScript (React / Next.js)<br />
<br />
**üì¶ Bibliotecas / Frameworks:**<br />
- React<br />
- Next.js<br />
- React Flow *(diagramas de fluxo)*<br />
- Firebase *(autentica√ß√£o e realtime database)*<br />
- Material-UI *(√≠cones)*<br />
- UUID *(gera√ß√£o de IDs √∫nicos)*<br />

<br />

## üß† Fun√ß√µes Principais

<br />
### ‚öôÔ∏è \`FlowApp()\`<br />
**Descri√ß√£o:** Componente principal que renderiza o editor de fluxo interativo com funcionalidades de:<br />
- cria√ß√£o de n√≥s<br />
- conex√µes<br />
- visualiza√ß√£o de impactos<br />
- gera√ß√£o de fluxos via IA<br />
- integra√ß√£o com Firebase<br />
<br />
**Par√¢metros:** Nenhum<br />
**Retorno:** JSX do editor<br />
<br />

### ü§ñ \`generateFlow()\`<br />
**Descri√ß√£o:** Gera um fluxo de processos com base em um prompt via API Groq. Cria automaticamente n√≥s e conex√µes.<br />
**Par√¢metros:** Nenhum (usa estado \`prompt\`)<br />
**Retorno:** Atualiza o estado local com novos n√≥s/conex√µes<br />
**Obs:** Valida plano do usu√°rio e trata erros<br />
<br />

### ‚òÅÔ∏è \`fetchNodes()\`<br />
**Descri√ß√£o:** Busca os n√≥s e conex√µes do usu√°rio no Firebase Realtime Database.<br />
**Par√¢metros:** Nenhum (usa \`userUID\`)<br />
**Retorno:** Atualiza o estado com os dados<br />
<br />

### üîó \`onConnect(params)\`<br />
**Descri√ß√£o:** Cria novas conex√µes entre n√≥s.<br />
**Par√¢metros:**<br />
- \`params\` (objeto): \`{ source, target }\`<br />
**Retorno:** Atualiza o estado e o Firebase<br />
<br />

### üîç \`viewImpact(event, nodeId, nodesImpacted, visited, depth)\`<br />
**Descri√ß√£o:** Calcula o impacto de um n√≥ em outros n√≥s (diretos e indiretos).<br />
**Par√¢metros:**<br />
- \`event?\`: DOM event<br />
- \`nodeId\`: ID do n√≥ de origem<br />
- \`nodesImpacted\`: \`Map\` para controle<br />
- \`visited\`: \`Map\` para evitar ciclos<br />
- \`depth\`: Profundidade da recurs√£o<br />
**Retorno:** Atualiza o estado com n√≥s impactados<br />
<br />

### ‚ûï \`createNewNode()\`<br />
**Descri√ß√£o:** Cria um novo n√≥ no centro da viewport.<br />
**Par√¢metros:** Nenhum<br />
**Retorno:** Adiciona o n√≥ ao estado e Firebase<br />
**Obs:** Respeita limita√ß√µes do plano<br />
<br />

### üóÇÔ∏è \`handleJSONUpload(event)\`<br />
**Descri√ß√£o:** Processa upload de JSON para gerar diagrama.<br />
**Par√¢metros:**<br />
- \`event\`: change do input de arquivo<br />
**Retorno:** Cria n√≥s e conex√µes a partir do JSON<br />
<br />

### üß© \`generateDiagramFromJSON(json)\`<br />
**Descri√ß√£o:** Transforma objeto JSON em n√≥s e conex√µes.<br />
**Par√¢metros:**<br />
- \`json\`: dados do diagrama<br />
**Retorno:** Atualiza estado com os elementos<br />
<br />

### üìù \`createAnnotation()\`<br />
**Descri√ß√£o:** Cria um novo n√≥ do tipo anota√ß√£o.<br />
**Par√¢metros:** Nenhum<br />
**Retorno:** Adiciona anota√ß√£o ao estado e Firebase<br />
**Obs:** Verifica plano do usu√°rio<br />
<br />

## üí¨ Observa√ß√µes Gerais<br />
1. Usa intensivamente hooks do React (\`useState\`, \`useEffect\`, \`useCallback\`)<br />
2. Firebase garante persist√™ncia e sincronia em tempo real<br />
3. Funcionalidades avan√ßadas do editor:<br />
   - Cria√ß√£o e remo√ß√£o de n√≥s/conex√µes<br />
   - Impact analysis<br />
   - Gera√ß√£o via IA (Groq)<br />
   - Importa√ß√£o/exporta√ß√£o de JSON<br />
   - Controle de tema (light/dark)<br />
4. Controle de permiss√µes com base no plano (FREE / PRO)<br />
5. Interface com tooltips e bot√µes flutuantes<br />
6. **Sugest√£o:** fun√ß√µes ligadas ao Firebase podem ser separadas em arquivos utilit√°rios para melhor organiza√ß√£o.<br />
<br />

‚ú® O c√≥digo est√° bem modularizado, com responsabilidade clara por fun√ß√£o e tratamento de erro presente. √ìtima base para evoluir funcionalidades como **colabora√ß√£o em tempo real**, **versionamento de fluxos**, entre outras.<br />
`}
                </Markdown>
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="backend" className="space-y-4">
            <Card>
              <CardContent className="p-4">
                <Markdown className="max-w-none prose dark:prose-invert max-h-[500px] overflow-y-auto">
                  {`
### üìÅ Arquivo: \`check-insta-status.py\`
<br/>
### üîç Linguagem: Python
<br/>
### üì¶ Bibliotecas: Playwright, pytesseract, OpenCV (cv2), NumPy, Pillow (PIL), python-dotenv
<br/>

---

### üß© Fun√ß√£o: \`preprocessar_imagem(imagem_array)\`
<br/>
**Descri√ß√£o**: Pr√©-processa uma imagem para otimizar a extra√ß√£o de texto via OCR (Reconhecimento √ìptico de Caracteres). Converte a imagem para escala de cinza, aplica binariza√ß√£o (thresholding) para aumentar o contraste e remove ru√≠dos. Opcionalmente, salva a imagem processada em disco.
<br/>
<br/>
**Par√¢metros**:
- \`imagem_array\` (numpy.ndarray): Array NumPy representando a imagem (formato BGR do OpenCV).
<br/>
<br/>
**Retorno**:  
- \`imagem_tratada\` (numpy.ndarray): Imagem processada em escala de cinza e binarizada.
<br/>
<br/>
**Observa√ß√µes**:
O salvamento da imagem √© controlado pela vari√°vel de ambiente \`SAVE_SCREENSHOT\`.
<br/>
<br/>

---

### üß© Fun√ß√£o: \`verificar_anuncio_ocr(url)\`
<br/>
<br/>
**Descri√ß√£o**: Verifica se um perfil do Instagram est√° ativo ou foi removido. Acessa a URL fornecida via Playwright (Chromium), captura a tela, aplica pr√©-processamento de imagem e usa OCR (pytesseract) para extrair texto. Analisa o texto em busca de frases indicativas de inatividade.
<br/>
<br/>
**Par√¢metros**:  
- \`url\` (string): URL do perfil do Instagram a ser verificado.
<br/>
<br/>
**Retorno**:  
- \`bool\`: \`True\` se o perfil estiver ativo (n√£o cont√©m frases de inatividade), \`False\` caso contr√°rio.
<br/>
<br/>
**Fluxo**:  
1. Abre o navegador em modo headless e captura um screenshot da p√°gina.  
2. Pr√©-processa a imagem com OpenCV e pytesseract.  
3. Extrai texto e verifica padr√µes como "isn't available" ou "n√£o est√° dispon√≠vel".
<br/>
<br/>
**Observa√ß√µes**: 
- Vari√°veis de ambiente controlam comportamentos opcionais (\`SAVE_SCREENSHOT\`, \`DEBUG\`).  
- A fun√ß√£o depende de bibliotecas externas para navega√ß√£o web e OCR.
<br/>
<br/>
**Exemplo de uso**:
\`\`\`python
url_anuncio = "https://www.instagram.com/signopoderoso/#"
print(f"Perfil Ativo: {verificar_anuncio_ocr(url_anuncio)}")
\`\`\`
`}</Markdown>
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="fullstack" className="space-y-4">
            <Card>
              <CardContent className="p-4">
                <Image
                  src="/placeholder.svg?height=600&width=1200"
                  alt="Exemplo de documenta√ß√£o full stack"
                  width={1200}
                  height={600}
                  className="rounded-lg object-cover w-full"
                />
              </CardContent>
            </Card>

          </TabsContent>
        </Tabs>
      </div>
    </section>
  )
}
